package com.daniloaraujosilva.mathemagika.library.common.mathematica.functions

import com.daniloaraujosilva.mathemagika.library.common.mathematica.MathematicaFunction

/**
 *````
 *
 * Name:             MailExecute
 *
 * Full name:        System`MailExecute
 *
 * Usage:            MailExecute[cmd, target] executes the mail command cmd on the target mail server connection, folder, file or item(s).
 *
 * Options:          None
 *
 * Attributes:
 *
 *                   local: paclet:ref/MailExecute
 * Documentation:    web: http://reference.wolfram.com/language/ref/MailExecute.html
 *
 *                   MailExecute["Delete", MailLink`Private`mailItem:MailItem[_Association]] := Module[{MailLink`Private`resultAssoc, MailLink`Private`setflags}, MailLink`Private`resultAssoc = MailExecute["SetFlags" -> {"Deleted"}, {MailLink`Private`mailItem}]; MailLink`Private`setflags = Lookup[MailLink`Private`resultAssoc, MailLink`Private`mailItem, {}]; If[TrueQ[MemberQ[MailLink`Private`setflags, "Deleted"]], Success["Delete", Association["MessageTemplate" :> "Message with UID `uid` has been marked for deletion.", "MessageParameters" -> Association["uid" :> MailLink`Private`mailItem["UID"]]]], Failure["Delete flag could not be set", Association["MessageTemplate" :> "Message with UID `uid`could not be marked for deletion.", "MessageParameters" -> Association["uid" :> MailLink`Private`mailItem["UID"]]]]]]
 *                   MailExecute["Delete", MailLink`Private`mailItems:{MailItem[_Association]..}] := Module[{MailLink`Private`resultAssoc, MailLink`Private`flags, MailLink`Private`successQ}, MailLink`Private`resultAssoc = MailExecute["SetFlags" -> {"Deleted"}, MailLink`Private`mailItems]; MailLink`Private`flags = Lookup[MailLink`Private`resultAssoc, MailLink`Private`mailItems]; MailLink`Private`successQ = AllTrue[MailLink`Private`flags, MemberQ[#1, "Deleted"] & ]; If[MailLink`Private`successQ, Success["Delete", Association["MessageTemplate" :> "All given messages were successfully marked for deletion."]], Failure["Delete flag could not be set", Association["MessageTemplate" :> "Some messages could not be marked for deletion."]]]]
 *                   MailExecute["MarkFolderRead", MailFolder[(MailLink`Private`mailFolderAssoc_)?AssociationQ]] := Module[{MailLink`Private`connection, MailLink`Private`res}, MailLink`Private`connection = Lookup[MailLink`Private`mailFolderAssoc, "Connection"]; MailLink`Private`res = IMAPLink`IMAPExecute[MailLink`Private`connection, "MarkFolderRead", KeyTake[MailLink`Private`mailFolderAssoc, "Path"]]; MailFolder[MailLink`Private`res]]
 *                   MailExecute[MailLink`Private`action:"SetTag" | "SetTags" | "SetFlag" | "SetFlags" -> MailLink`Private`tag_String, MailLink`Private`mailItem:MailItem[_Association]] := First[Values[MailExecute["SetFlags" -> {MailLink`Private`tag}, {MailLink`Private`mailItem}]]]
 *                   MailExecute[MailLink`Private`action:"SetTag" | "SetTags" | "SetFlag" | "SetFlags" -> MailLink`Private`tag_List, MailLink`Private`mailItem:MailItem[_Association]] := First[Values[MailExecute["SetFlags" -> MailLink`Private`tag, {MailLink`Private`mailItem}]]]
 *                   MailExecute[MailLink`Private`action:"ClearTag" | "ClearTags" | "ClearFlag" | "ClearFlags" -> MailLink`Private`tag_String, MailLink`Private`mailItem:MailItem[_Association]] := First[Values[MailExecute["ClearFlags" -> {MailLink`Private`tag}, {MailLink`Private`mailItem}]]]
 *                   MailExecute[MailLink`Private`action:"ClearTag" | "ClearTags" | "ClearFlag" | "ClearFlags" -> MailLink`Private`tag_List, MailLink`Private`mailItem:MailItem[_Association]] := First[Values[MailExecute["ClearFlags" -> MailLink`Private`tag, {MailLink`Private`mailItem}]]]
 *                   MailExecute[MailLink`Private`action:"SetTag" | "SetTags" | "SetFlag" | "SetFlags" -> MailLink`Private`tag_String, MailLink`Private`mailItems:{MailItem[_Association]..}] := MailExecute["SetFlags" -> {MailLink`Private`tag}, MailLink`Private`mailItems]
 *                   MailExecute[MailLink`Private`action:"ClearFlag" | "ClearFlags" | "ClearTag" | "ClearTags" -> MailLink`Private`flag_String, MailLink`Private`mailItems:{MailItem[_Association]..}] := MailExecute["ClearFlags" -> {MailLink`Private`flag}, MailLink`Private`mailItems]
 *                   MailExecute[MailLink`Private`action:"SetTag" | "SetTags" | "SetFlag" | "SetFlags" -> MailLink`Private`flags_List, MailLink`Private`mailItems:{MailItem[_Association]..}] := MailLink`Private`implMailExecute["SetFlags" -> MailLink`Private`flags, MailLink`Private`mailItems]
 *                   MailExecute[MailLink`Private`action:"ClearTag" | "ClearTags" | "ClearFlag" | "ClearFlags" -> MailLink`Private`flags_List, MailLink`Private`mailItems:{MailItem[_Association]..}] := MailLink`Private`implMailExecute["ClearFlags" -> MailLink`Private`flags, MailLink`Private`mailItems]
 *                   MailExecute["Flags", MailLink`Private`item_MailItem] := MailExecute["Flags", {MailLink`Private`item}][[1]]
 *                   MailExecute["Flags", MailLink`Private`list:{MailItem[_Association]..}] := Module[{MailLink`Private`res}, MailLink`Private`res = MailLink`Private`implMailExecute["Flags", MailLink`Private`list]; MailLink`Private`res]
 *                   MailExecute["Tags", MailLink`Private`item_MailItem] := MailExecute["Tags", {MailLink`Private`item}][[1]]
 *                   MailExecute["Tags", MailLink`Private`list:{MailItem[_Association]..}] := Module[{MailLink`Private`res}, MailLink`Private`res = MailLink`Private`implMailExecute["Tags", MailLink`Private`list]; MailLink`Private`res]
 *                   MailExecute["Copy" -> MailLink`Private`mailFolder_MailFolder, MailLink`Private`mailItem:MailItem[_Association]] := With[{MailLink`Private`res = MailExecute["Copy" -> MailLink`Private`mailFolder, {MailLink`Private`mailItem}]}, If[Length[MailLink`Private`res] === 1, MailLink`Private`res[[1]], $Failed]]
 *                   MailExecute["UploadEMLString" -> MailLink`Private`mf_MailFolder, MailLink`Private`eml_String] := MailExecute["UploadEMLString" -> MailLink`Private`mf, {MailLink`Private`eml}]
 *                   MailExecute["Upload" -> MailLink`Private`mf_MailFolder, MailLink`Private`mailItem:MailItem[_Association]] := MailExecute["Upload" -> MailLink`Private`mf, {MailLink`Private`mailItem}]
 *                   MailExecute["Upload" -> MailLink`Private`mf_MailFolder, MailLink`Private`mailItems:{MailItem[_Association]..}] := Module[{MailLink`Private`files}, MailLink`Private`files = (#1["EMLFile"] & ) /@ MailLink`Private`mailItems; MailExecute["UploadEMLFiles" -> MailLink`Private`mf, MailLink`Private`files]]
 *                   MailExecute["UploadEMLFile" -> MailLink`Private`mf_MailFolder, MailLink`Private`eml_File] := MailExecute["UploadEMLFiles" -> MailLink`Private`mf, {MailLink`Private`eml}]
 *                   MailExecute["UploadEMLFile" -> MailLink`Private`mf_MailFolder, MailLink`Private`files:{File[_]..}] := MailExecute["UploadEMLFiles" -> MailLink`Private`mf, MailLink`Private`files]
 *                   MailExecute["UploadEMLFiles" -> MailFolder[MailLink`Private`destFolderAssoc_Association], MailLink`Private`files:{File[_]..}] := Module[{MailLink`Private`codes, MailLink`Private`path, MailLink`Private`connection}, MailLink`Private`connection = Lookup[MailLink`Private`destFolderAssoc, "Connection"]; MailLink`Private`path = Lookup[MailLink`Private`destFolderAssoc, "Path"]; MailLink`Private`codes = (IMAPLink`IMAPExecute[MailLink`Private`connection, "UploadEMLFile", {"Folder" -> MailLink`Private`path, "File" -> FindFile[#1]}] & ) /@ MailLink`Private`files; MailLink`Private`checkUploadCodes[MailLink`Private`codes]]
 *                   MailExecute["UploadMBOXFile" -> MailFolder[MailLink`Private`destFolderAssoc_Association], File[MailLink`Private`fileName_String]] := Module[{MailLink`Private`codes, MailLink`Private`path, MailLink`Private`connection}, MailLink`Private`connection = Lookup[MailLink`Private`destFolderAssoc, "Connection"]; MailLink`Private`path = Lookup[MailLink`Private`destFolderAssoc, "Path"]; MailLink`Private`codes = IMAPLink`IMAPExecute[MailLink`Private`connection, "UploadMBOXFile", {"Folder" -> MailLink`Private`path, "File" -> FindFile[MailLink`Private`fileName]}]; MailLink`Private`checkUploadCodes[MailLink`Private`codes]]
 *                   MailExecute["UploadMBOXFiles" -> MailFolder[MailLink`Private`destFolderAssoc_Association], MailLink`Private`files:{File[_String]..}] := Module[{MailLink`Private`codes, MailLink`Private`path, MailLink`Private`connection}, MailLink`Private`connection = Lookup[MailLink`Private`destFolderAssoc, "Connection"]; MailLink`Private`path = Lookup[MailLink`Private`destFolderAssoc, "Path"]; MailLink`Private`codes = MapIndexed[IMAPLink`IMAPExecute[MailLink`Private`connection, "UploadMBOXFile", {"Folder" -> MailLink`Private`path, "File" -> FindFile[#1], "Index" -> First[#2]}] & , MailLink`Private`files]; MailLink`Private`checkUploadCodes[Flatten[MailLink`Private`codes]]]
 *                   MailExecute["UploadEMLString" -> MailFolder[MailLink`Private`destFolderAssoc_Association], MailLink`Private`messages:{_String..}] := Module[{MailLink`Private`codes, MailLink`Private`path, MailLink`Private`connection}, MailLink`Private`connection = Lookup[MailLink`Private`destFolderAssoc, "Connection"]; MailLink`Private`path = Lookup[MailLink`Private`destFolderAssoc, "Path"]; MailLink`Private`codes = (IMAPLink`IMAPExecute[MailLink`Private`connection, "UploadEMLString", {"Folder" -> MailLink`Private`path, "Message" -> #1}] & ) /@ MailLink`Private`messages; MailLink`Private`checkUploadCodes[MailLink`Private`codes]]
 *                   MailExecute["Copy" -> MailFolder[MailLink`Private`destFolderAssoc_Association], MailLink`Private`mailItems:{MailItem[_Association]..}] := Module[{MailLink`Private`newUIDs, MailLink`Private`allresponses, MailLink`Private`responses, MailLink`Private`folders, MailLink`Private`mailitems, MailLink`Private`uids, MailLink`Private`uidMailItemAssocs, MailLink`Private`data, MailLink`Private`mailAssocs, MailLink`Private`folderAssocAndUIDs, MailLink`Private`assoc, MailLink`Private`connection}, MailLink`Private`connection = Lookup[MailLink`Private`destFolderAssoc, "Connection"]; MailLink`Private`mailAssocs = (Extract[#1, 1] & ) /@ MailLink`Private`mailItems; MailLink`Private`data = GroupBy[MailLink`Private`mailAssocs, Extract[#MailFolder, 1] & ]; MailLink`Private`folderAssocAndUIDs = (Association[MailLink`Private`uidLookup[#1]] & ) /@ MailLink`Private`data; MailLink`Private`uidMailItemAssocs = Values[MailLink`Private`folderAssocAndUIDs]; MailLink`Private`uids = Keys[MailLink`Private`uidMailItemAssocs]; MailLink`Private`mailitems = Values[MailLink`Private`uidMailItemAssocs]; MailLink`Private`folders = Keys[MailLink`Private`folderAssocAndUIDs]; MailLink`Private`allresponses = MapThread[(MailLink`Private`assoc = IMAPLink`IMAPExecute[MailLink`Private`connection, "SelectFolder", KeyTake[#1, "Path"]]; MailLink`Private`responses = IMAPLink`IMAPExecute[MailLink`Private`connection, "Copy", Join[KeyTake[MailLink`Private`destFolderAssoc, "Path"], Association["UIDS" -> #2]]]; MailLink`Private`responses) & , {MailLink`Private`folders, MailLink`Private`uids}]; MailLink`Private`newUIDs = Flatten[MailLink`Private`allresponses]; MailItem /@ IMAPLink`IMAPExecute[MailLink`Private`connection, "GetMailItems", Join[KeyTake[MailLink`Private`destFolderAssoc, "Path"], Association["UIDS" -> MailLink`Private`newUIDs]]]]
 *                   MailExecute["Download", MailLink`Private`ms_MailServerConnection] := MailExecute["Download", MailLink`Private`ms["MailFolderList"]]
 *                   MailExecute["Download", MailLink`Private`folder_MailFolder] := With[{MailLink`Private`res = MailExecute["Download", {MailLink`Private`folder}]}, If[Length[MailLink`Private`res] == 1, MailLink`Private`res[[1]]]]
 *                   MailExecute["Download", MailLink`Private`folders_List] := Module[{MailLink`Private`mailFolderAssoc, MailLink`Private`nb, MailLink`Private`str, MailLink`Private`count = 0, MailLink`Private`total = Length[MailLink`Private`folders], MailLink`Private`res, MailLink`Private`connection}, IMAPLink`Private`$downloadMessage = "Fetching messages..."; MailLink`Private`str = If[MailLink`Private`total > 1, MailLink`Private`$downloadFolderTemplate[MailLink`Private`total - MailLink`Private`count, MailLink`Private`total], ""]; MailLink`Private`nb = PrintTemporary[Dynamic[Internal`LoadingPanel[StringJoin[IMAPLink`Private`$downloadMessage, MailLink`Private`str]]]]; ((MailLink`Private`mailFolderAssoc = Extract[#1, 1]; MailLink`Private`connection = Lookup[MailLink`Private`mailFolderAssoc, "Connection"]; MailLink`Private`res = IMAPLink`IMAPExecute[MailLink`Private`connection, "DownloadMailItems", Join[Association["Positions" -> 1 ;; -1], KeyTake[MailLink`Private`mailFolderAssoc, "Path"]]]; MailLink`Private`count++; MailLink`Private`str = If[MailLink`Private`total > 1, MailLink`Private`$downloadFolderTemplate[MailLink`Private`total - MailLink`Private`count, MailLink`Private`total], ""]; MailLink`Private`res) & ) /@ MailLink`Private`folders]
 *                   MailExecute["Expunge", MailLink`Private`folders_List] := If[AllTrue[(MailExecute["Expunge", #1] & ) /@ MailLink`Private`folders, Head[#1] === Success & ], Success["Expunge", Association["MessageTemplate" :> "Messages have been deleted."]], Failure["Expunge", Association["MessageTemplate" :> "Some messages could not be deleted"]]]
 *                   MailExecute["Expunge", MailFolder[MailLink`Private`assoc_Association]] := Module[{MailLink`Private`resp, MailLink`Private`res, MailLink`Private`connection}, MailLink`Private`connection = Lookup[MailLink`Private`assoc, "Connection"]; MailLink`Private`resp = IMAPLink`IMAPExecute[MailLink`Private`connection, "SelectFolder", KeyTake[MailLink`Private`assoc, "Path"]]; MailLink`Private`res = IMAPLink`IMAPExecute[MailLink`Private`connection, "Expunge", KeyTake[MailLink`Private`assoc, "Path"]]; If[MailLink`Private`res["SuccessQ"], Success["Expunge", Association["MessageTemplate" :> "`count`", "MessageParameters" -> Association["count" :> Which[MailLink`Private`res["DeletedMessageCount"] > 1, StringJoin[ToString[MailLink`Private`res["DeletedMessageCount"]], " messages deleted."], MailLink`Private`res["DeletedMessageCount"] === 1, StringJoin[ToString[MailLink`Private`res["DeletedMessageCount"]], " message deleted."], True, "No messages were deleted"]]]], Failure["Some messages could not be deleted", Association["MessageTemplate" :> "Message deleted `count`.", "MessageParameters" -> Association["count" -> MailLink`Private`res["DeletedMessageCount"]]]]]]
 *                   MailExecute["Create" -> MailLink`Private`folder_String, MailLink`Private`mf_MailFolder] := IMAPLink`IMAPExecute[MailLink`Private`mf, "CreateFolder", MailLink`Private`folder]
 * Definitions:      MailExecute["Create" -> MailLink`Private`folder_String, MailServerConnection[MailLink`Private`assoc_Association]] := Module[{MailLink`Private`connection, MailLink`Private`folderAssoc}, MailLink`Private`connection = Lookup[MailLink`Private`assoc, "Connection"]; MailLink`Private`folderAssoc = IMAPLink`IMAPExecute[MailLink`Private`connection, "CreateFolder", {"Path" -> MailLink`Private`folder}]; MailFolder[MailLink`Private`folderAssoc]]
 *
 * Own values:       None
 *
 *                   MailExecute["Delete", MailLink`Private`mailItem:MailItem[_Association]] := Module[{MailLink`Private`resultAssoc, MailLink`Private`setflags}, MailLink`Private`resultAssoc = MailExecute["SetFlags" -> {"Deleted"}, {MailLink`Private`mailItem}]; MailLink`Private`setflags = Lookup[MailLink`Private`resultAssoc, MailLink`Private`mailItem, {}]; If[TrueQ[MemberQ[MailLink`Private`setflags, "Deleted"]], Success["Delete", Association["MessageTemplate" :> "Message with UID `uid` has been marked for deletion.", "MessageParameters" -> Association["uid" :> MailLink`Private`mailItem["UID"]]]], Failure["Delete flag could not be set", Association["MessageTemplate" :> "Message with UID `uid`could not be marked for deletion.", "MessageParameters" -> Association["uid" :> MailLink`Private`mailItem["UID"]]]]]]
 *                   MailExecute["Delete", MailLink`Private`mailItems:{MailItem[_Association]..}] := Module[{MailLink`Private`resultAssoc, MailLink`Private`flags, MailLink`Private`successQ}, MailLink`Private`resultAssoc = MailExecute["SetFlags" -> {"Deleted"}, MailLink`Private`mailItems]; MailLink`Private`flags = Lookup[MailLink`Private`resultAssoc, MailLink`Private`mailItems]; MailLink`Private`successQ = AllTrue[MailLink`Private`flags, MemberQ[#1, "Deleted"] & ]; If[MailLink`Private`successQ, Success["Delete", Association["MessageTemplate" :> "All given messages were successfully marked for deletion."]], Failure["Delete flag could not be set", Association["MessageTemplate" :> "Some messages could not be marked for deletion."]]]]
 *                   MailExecute["MarkFolderRead", MailFolder[(MailLink`Private`mailFolderAssoc_)?AssociationQ]] := Module[{MailLink`Private`connection, MailLink`Private`res}, MailLink`Private`connection = Lookup[MailLink`Private`mailFolderAssoc, "Connection"]; MailLink`Private`res = IMAPLink`IMAPExecute[MailLink`Private`connection, "MarkFolderRead", KeyTake[MailLink`Private`mailFolderAssoc, "Path"]]; MailFolder[MailLink`Private`res]]
 *                   MailExecute[MailLink`Private`action:"SetTag" | "SetTags" | "SetFlag" | "SetFlags" -> MailLink`Private`tag_String, MailLink`Private`mailItem:MailItem[_Association]] := First[Values[MailExecute["SetFlags" -> {MailLink`Private`tag}, {MailLink`Private`mailItem}]]]
 *                   MailExecute[MailLink`Private`action:"SetTag" | "SetTags" | "SetFlag" | "SetFlags" -> MailLink`Private`tag_List, MailLink`Private`mailItem:MailItem[_Association]] := First[Values[MailExecute["SetFlags" -> MailLink`Private`tag, {MailLink`Private`mailItem}]]]
 *                   MailExecute[MailLink`Private`action:"ClearTag" | "ClearTags" | "ClearFlag" | "ClearFlags" -> MailLink`Private`tag_String, MailLink`Private`mailItem:MailItem[_Association]] := First[Values[MailExecute["ClearFlags" -> {MailLink`Private`tag}, {MailLink`Private`mailItem}]]]
 *                   MailExecute[MailLink`Private`action:"ClearTag" | "ClearTags" | "ClearFlag" | "ClearFlags" -> MailLink`Private`tag_List, MailLink`Private`mailItem:MailItem[_Association]] := First[Values[MailExecute["ClearFlags" -> MailLink`Private`tag, {MailLink`Private`mailItem}]]]
 *                   MailExecute[MailLink`Private`action:"SetTag" | "SetTags" | "SetFlag" | "SetFlags" -> MailLink`Private`tag_String, MailLink`Private`mailItems:{MailItem[_Association]..}] := MailExecute["SetFlags" -> {MailLink`Private`tag}, MailLink`Private`mailItems]
 *                   MailExecute[MailLink`Private`action:"ClearFlag" | "ClearFlags" | "ClearTag" | "ClearTags" -> MailLink`Private`flag_String, MailLink`Private`mailItems:{MailItem[_Association]..}] := MailExecute["ClearFlags" -> {MailLink`Private`flag}, MailLink`Private`mailItems]
 *                   MailExecute[MailLink`Private`action:"SetTag" | "SetTags" | "SetFlag" | "SetFlags" -> MailLink`Private`flags_List, MailLink`Private`mailItems:{MailItem[_Association]..}] := MailLink`Private`implMailExecute["SetFlags" -> MailLink`Private`flags, MailLink`Private`mailItems]
 *                   MailExecute[MailLink`Private`action:"ClearTag" | "ClearTags" | "ClearFlag" | "ClearFlags" -> MailLink`Private`flags_List, MailLink`Private`mailItems:{MailItem[_Association]..}] := MailLink`Private`implMailExecute["ClearFlags" -> MailLink`Private`flags, MailLink`Private`mailItems]
 *                   MailExecute["Flags", MailLink`Private`item_MailItem] := MailExecute["Flags", {MailLink`Private`item}][[1]]
 *                   MailExecute["Flags", MailLink`Private`list:{MailItem[_Association]..}] := Module[{MailLink`Private`res}, MailLink`Private`res = MailLink`Private`implMailExecute["Flags", MailLink`Private`list]; MailLink`Private`res]
 *                   MailExecute["Tags", MailLink`Private`item_MailItem] := MailExecute["Tags", {MailLink`Private`item}][[1]]
 *                   MailExecute["Tags", MailLink`Private`list:{MailItem[_Association]..}] := Module[{MailLink`Private`res}, MailLink`Private`res = MailLink`Private`implMailExecute["Tags", MailLink`Private`list]; MailLink`Private`res]
 *                   MailExecute["Copy" -> MailLink`Private`mailFolder_MailFolder, MailLink`Private`mailItem:MailItem[_Association]] := With[{MailLink`Private`res = MailExecute["Copy" -> MailLink`Private`mailFolder, {MailLink`Private`mailItem}]}, If[Length[MailLink`Private`res] === 1, MailLink`Private`res[[1]], $Failed]]
 *                   MailExecute["UploadEMLString" -> MailLink`Private`mf_MailFolder, MailLink`Private`eml_String] := MailExecute["UploadEMLString" -> MailLink`Private`mf, {MailLink`Private`eml}]
 *                   MailExecute["Upload" -> MailLink`Private`mf_MailFolder, MailLink`Private`mailItem:MailItem[_Association]] := MailExecute["Upload" -> MailLink`Private`mf, {MailLink`Private`mailItem}]
 *                   MailExecute["Upload" -> MailLink`Private`mf_MailFolder, MailLink`Private`mailItems:{MailItem[_Association]..}] := Module[{MailLink`Private`files}, MailLink`Private`files = (#1["EMLFile"] & ) /@ MailLink`Private`mailItems; MailExecute["UploadEMLFiles" -> MailLink`Private`mf, MailLink`Private`files]]
 *                   MailExecute["UploadEMLFile" -> MailLink`Private`mf_MailFolder, MailLink`Private`eml_File] := MailExecute["UploadEMLFiles" -> MailLink`Private`mf, {MailLink`Private`eml}]
 *                   MailExecute["UploadEMLFile" -> MailLink`Private`mf_MailFolder, MailLink`Private`files:{File[_]..}] := MailExecute["UploadEMLFiles" -> MailLink`Private`mf, MailLink`Private`files]
 *                   MailExecute["UploadEMLFiles" -> MailFolder[MailLink`Private`destFolderAssoc_Association], MailLink`Private`files:{File[_]..}] := Module[{MailLink`Private`codes, MailLink`Private`path, MailLink`Private`connection}, MailLink`Private`connection = Lookup[MailLink`Private`destFolderAssoc, "Connection"]; MailLink`Private`path = Lookup[MailLink`Private`destFolderAssoc, "Path"]; MailLink`Private`codes = (IMAPLink`IMAPExecute[MailLink`Private`connection, "UploadEMLFile", {"Folder" -> MailLink`Private`path, "File" -> FindFile[#1]}] & ) /@ MailLink`Private`files; MailLink`Private`checkUploadCodes[MailLink`Private`codes]]
 *                   MailExecute["UploadMBOXFile" -> MailFolder[MailLink`Private`destFolderAssoc_Association], File[MailLink`Private`fileName_String]] := Module[{MailLink`Private`codes, MailLink`Private`path, MailLink`Private`connection}, MailLink`Private`connection = Lookup[MailLink`Private`destFolderAssoc, "Connection"]; MailLink`Private`path = Lookup[MailLink`Private`destFolderAssoc, "Path"]; MailLink`Private`codes = IMAPLink`IMAPExecute[MailLink`Private`connection, "UploadMBOXFile", {"Folder" -> MailLink`Private`path, "File" -> FindFile[MailLink`Private`fileName]}]; MailLink`Private`checkUploadCodes[MailLink`Private`codes]]
 *                   MailExecute["UploadMBOXFiles" -> MailFolder[MailLink`Private`destFolderAssoc_Association], MailLink`Private`files:{File[_String]..}] := Module[{MailLink`Private`codes, MailLink`Private`path, MailLink`Private`connection}, MailLink`Private`connection = Lookup[MailLink`Private`destFolderAssoc, "Connection"]; MailLink`Private`path = Lookup[MailLink`Private`destFolderAssoc, "Path"]; MailLink`Private`codes = MapIndexed[IMAPLink`IMAPExecute[MailLink`Private`connection, "UploadMBOXFile", {"Folder" -> MailLink`Private`path, "File" -> FindFile[#1], "Index" -> First[#2]}] & , MailLink`Private`files]; MailLink`Private`checkUploadCodes[Flatten[MailLink`Private`codes]]]
 *                   MailExecute["UploadEMLString" -> MailFolder[MailLink`Private`destFolderAssoc_Association], MailLink`Private`messages:{_String..}] := Module[{MailLink`Private`codes, MailLink`Private`path, MailLink`Private`connection}, MailLink`Private`connection = Lookup[MailLink`Private`destFolderAssoc, "Connection"]; MailLink`Private`path = Lookup[MailLink`Private`destFolderAssoc, "Path"]; MailLink`Private`codes = (IMAPLink`IMAPExecute[MailLink`Private`connection, "UploadEMLString", {"Folder" -> MailLink`Private`path, "Message" -> #1}] & ) /@ MailLink`Private`messages; MailLink`Private`checkUploadCodes[MailLink`Private`codes]]
 *                   MailExecute["Copy" -> MailFolder[MailLink`Private`destFolderAssoc_Association], MailLink`Private`mailItems:{MailItem[_Association]..}] := Module[{MailLink`Private`newUIDs, MailLink`Private`allresponses, MailLink`Private`responses, MailLink`Private`folders, MailLink`Private`mailitems, MailLink`Private`uids, MailLink`Private`uidMailItemAssocs, MailLink`Private`data, MailLink`Private`mailAssocs, MailLink`Private`folderAssocAndUIDs, MailLink`Private`assoc, MailLink`Private`connection}, MailLink`Private`connection = Lookup[MailLink`Private`destFolderAssoc, "Connection"]; MailLink`Private`mailAssocs = (Extract[#1, 1] & ) /@ MailLink`Private`mailItems; MailLink`Private`data = GroupBy[MailLink`Private`mailAssocs, Extract[#MailFolder, 1] & ]; MailLink`Private`folderAssocAndUIDs = (Association[MailLink`Private`uidLookup[#1]] & ) /@ MailLink`Private`data; MailLink`Private`uidMailItemAssocs = Values[MailLink`Private`folderAssocAndUIDs]; MailLink`Private`uids = Keys[MailLink`Private`uidMailItemAssocs]; MailLink`Private`mailitems = Values[MailLink`Private`uidMailItemAssocs]; MailLink`Private`folders = Keys[MailLink`Private`folderAssocAndUIDs]; MailLink`Private`allresponses = MapThread[(MailLink`Private`assoc = IMAPLink`IMAPExecute[MailLink`Private`connection, "SelectFolder", KeyTake[#1, "Path"]]; MailLink`Private`responses = IMAPLink`IMAPExecute[MailLink`Private`connection, "Copy", Join[KeyTake[MailLink`Private`destFolderAssoc, "Path"], Association["UIDS" -> #2]]]; MailLink`Private`responses) & , {MailLink`Private`folders, MailLink`Private`uids}]; MailLink`Private`newUIDs = Flatten[MailLink`Private`allresponses]; MailItem /@ IMAPLink`IMAPExecute[MailLink`Private`connection, "GetMailItems", Join[KeyTake[MailLink`Private`destFolderAssoc, "Path"], Association["UIDS" -> MailLink`Private`newUIDs]]]]
 *                   MailExecute["Download", MailLink`Private`ms_MailServerConnection] := MailExecute["Download", MailLink`Private`ms["MailFolderList"]]
 *                   MailExecute["Download", MailLink`Private`folder_MailFolder] := With[{MailLink`Private`res = MailExecute["Download", {MailLink`Private`folder}]}, If[Length[MailLink`Private`res] == 1, MailLink`Private`res[[1]]]]
 *                   MailExecute["Download", MailLink`Private`folders_List] := Module[{MailLink`Private`mailFolderAssoc, MailLink`Private`nb, MailLink`Private`str, MailLink`Private`count = 0, MailLink`Private`total = Length[MailLink`Private`folders], MailLink`Private`res, MailLink`Private`connection}, IMAPLink`Private`$downloadMessage = "Fetching messages..."; MailLink`Private`str = If[MailLink`Private`total > 1, MailLink`Private`$downloadFolderTemplate[MailLink`Private`total - MailLink`Private`count, MailLink`Private`total], ""]; MailLink`Private`nb = PrintTemporary[Dynamic[Internal`LoadingPanel[StringJoin[IMAPLink`Private`$downloadMessage, MailLink`Private`str]]]]; ((MailLink`Private`mailFolderAssoc = Extract[#1, 1]; MailLink`Private`connection = Lookup[MailLink`Private`mailFolderAssoc, "Connection"]; MailLink`Private`res = IMAPLink`IMAPExecute[MailLink`Private`connection, "DownloadMailItems", Join[Association["Positions" -> 1 ;; -1], KeyTake[MailLink`Private`mailFolderAssoc, "Path"]]]; MailLink`Private`count++; MailLink`Private`str = If[MailLink`Private`total > 1, MailLink`Private`$downloadFolderTemplate[MailLink`Private`total - MailLink`Private`count, MailLink`Private`total], ""]; MailLink`Private`res) & ) /@ MailLink`Private`folders]
 *                   MailExecute["Expunge", MailLink`Private`folders_List] := If[AllTrue[(MailExecute["Expunge", #1] & ) /@ MailLink`Private`folders, Head[#1] === Success & ], Success["Expunge", Association["MessageTemplate" :> "Messages have been deleted."]], Failure["Expunge", Association["MessageTemplate" :> "Some messages could not be deleted"]]]
 *                   MailExecute["Expunge", MailFolder[MailLink`Private`assoc_Association]] := Module[{MailLink`Private`resp, MailLink`Private`res, MailLink`Private`connection}, MailLink`Private`connection = Lookup[MailLink`Private`assoc, "Connection"]; MailLink`Private`resp = IMAPLink`IMAPExecute[MailLink`Private`connection, "SelectFolder", KeyTake[MailLink`Private`assoc, "Path"]]; MailLink`Private`res = IMAPLink`IMAPExecute[MailLink`Private`connection, "Expunge", KeyTake[MailLink`Private`assoc, "Path"]]; If[MailLink`Private`res["SuccessQ"], Success["Expunge", Association["MessageTemplate" :> "`count`", "MessageParameters" -> Association["count" :> Which[MailLink`Private`res["DeletedMessageCount"] > 1, StringJoin[ToString[MailLink`Private`res["DeletedMessageCount"]], " messages deleted."], MailLink`Private`res["DeletedMessageCount"] === 1, StringJoin[ToString[MailLink`Private`res["DeletedMessageCount"]], " message deleted."], True, "No messages were deleted"]]]], Failure["Some messages could not be deleted", Association["MessageTemplate" :> "Message deleted `count`.", "MessageParameters" -> Association["count" -> MailLink`Private`res["DeletedMessageCount"]]]]]]
 *                   MailExecute["Create" -> MailLink`Private`folder_String, MailLink`Private`mf_MailFolder] := IMAPLink`IMAPExecute[MailLink`Private`mf, "CreateFolder", MailLink`Private`folder]
 * Down values:      MailExecute["Create" -> MailLink`Private`folder_String, MailServerConnection[MailLink`Private`assoc_Association]] := Module[{MailLink`Private`connection, MailLink`Private`folderAssoc}, MailLink`Private`connection = Lookup[MailLink`Private`assoc, "Connection"]; MailLink`Private`folderAssoc = IMAPLink`IMAPExecute[MailLink`Private`connection, "CreateFolder", {"Path" -> MailLink`Private`folder}]; MailFolder[MailLink`Private`folderAssoc]]
 *
 * Up values:        None
 *
 * Sub values:       None
 *
 * Default value:    None
 *
 * Numeric values:   None
 */
fun mailExecute(vararg arguments: Any?, options: MutableMap<String, Any?> = mutableMapOf()): MathematicaFunction {
	return MathematicaFunction("MailExecute", arguments.toMutableList(), options)
}
