package com.daniloaraujosilva.mathemagika.library.jvm.functions

import com.daniloaraujosilva.mathemagika.library.jvm.MathematicaFunction

/**
 *````
 *
 * Name:             RemoteRun
 *
 * Full name:        System`RemoteRun
 *
 *                   RemoteRun["host", "command"] runs the specified operating system command on the remote host, returning the exit code obtained.
 *                   RemoteRun[IPAddress["address"], "command"] runs the command on the machine with the specified IP address.
 * Usage:            RemoteRun[obj, "command"] run the command on the remote host specified by the RemoteConnectionObject obj.
 *
 *                   Authentication :> $SSHAuthentication
 * Options:          RemoteAuthorizationCaching -> False
 *
 * Attributes:       Protected
 *
 *                   local: paclet:ref/RemoteRun
 * Documentation:    web: http://reference.wolfram.com/language/ref/RemoteRun.html
 *
 *                   RemoteRun[SecureShellLink`Private`userhost:_String | _IPAddress | _URL, SecureShellLink`Private`command_String, SecureShellLink`Private`opts:OptionsPattern[]] := Block[{SecureShellLink`Private`hostname, SecureShellLink`Private`username, SecureShellLink`Private`password, SecureShellLink`Private`auths, SecureShellLink`Private`result, SecureShellLink`Private`index, SecureShellLink`Private`authenticated = -1, SecureShellLink`Private`cacheAuth, SecureShellLink`Private`triedUser, SecureShellLink`Private`eCode, SecureShellLink`Private`rememberMe, SecureShellLink`Private`pem, SecureShellLink`Private`pemPassword, SecureShellLink`Private`tryPemWithPass, SecureShellLink`Private`tryPemWithAll}, SecureShellLink`Private`auths = OptionValue[Authentication]; SecureShellLink`Private`cacheAuth = TrueQ[OptionValue[RemoteAuthorizationCaching]]; {SecureShellLink`Private`username, SecureShellLink`Private`password} = SecureShellLink`Private`resolveUserPass[SecureShellLink`Private`userhost, "", "", SecureShellLink`Private`auths]; SecureShellLink`Private`hostname = SecureShellLink`Private`getHost[SecureShellLink`Private`userhost]; {SecureShellLink`Private`username, SecureShellLink`Private`hostname} = SecureShellLink`Private`checkSSHConfig[SecureShellLink`Private`username, SecureShellLink`Private`hostname]; SecureShellLink`Private`index = SecureShellLink`Private`sshInit[SecureShellLink`Private`hostname]; If[SecureShellLink`Private`index < 0, If[SecureShellLink`Private`index === -3, Message[RemoteRun::addr, SecureShellLink`Private`hostname], Message[RemoteRun::init]]; Return[$Failed]]; SecureShellLink`Private`pem = Lookup[SecureShellLink`Private`auths, "SSHKey"]; If[ !MissingQ[SecureShellLink`Private`pem], SecureShellLink`Private`pemPassword = Lookup[SecureShellLink`Private`auths, "SSHKeyPassword", ""]; SecureShellLink`Private`tryPemWithPass[SecureShellLink`Private`singlePem_] := Function[SecureShellLink`Private`singlePass, Block[{SecureShellLink`Private`passData = SecureShellLink`Private`singlePass}, If[SecureShellLink`Private`authenticated > 0, Return[]]; If[SecureShellLink`Private`passData === None, SecureShellLink`Private`passData = ""]; If[MatchQ[SecureShellLink`Private`passData, File[_String, ___]], If[FileExistsQ[First[SecureShellLink`Private`passData]], SecureShellLink`Private`passData = StringTrim[ReadString[SecureShellLink`Private`passData]]; ]; ]; If[StringQ[SecureShellLink`Private`passData], Which[MatchQ[SecureShellLink`Private`singlePem, _File], SecureShellLink`Private`authenticated = SecureShellLink`Private`SSHAuthenticateKeyFile[SecureShellLink`Private`index, SecureShellLink`Private`username, SecureShellLink`Private`singlePem[[1]], SecureShellLink`Private`passData], StringQ[SecureShellLink`Private`singlePem], SecureShellLink`Private`authenticated = SecureShellLink`Private`SSHAuthenticateKeyData[SecureShellLink`Private`index, SecureShellLink`Private`username, SecureShellLink`Private`singlePem, SecureShellLink`Private`passData]]]]]; SecureShellLink`Private`tryPemWithAll = Function[SecureShellLink`Private`singlePem, Which[ListQ[SecureShellLink`Private`pemPassword], SecureShellLink`Private`tryPemWithPass[SecureShellLink`Private`singlePem] /@ SecureShellLink`Private`pemPassword, MatchQ[SecureShellLink`Private`pemPassword, _String | File[_String, ___]], SecureShellLink`Private`tryPemWithPass[SecureShellLink`Private`singlePem][SecureShellLink`Private`pemPassword]]]; Which[ListQ[SecureShellLink`Private`pem], SecureShellLink`Private`tryPemWithAll /@ SecureShellLink`Private`pem, MatchQ[SecureShellLink`Private`pem, _String | _File], SecureShellLink`Private`tryPemWithAll[SecureShellLink`Private`pem]]]; If[SecureShellLink`Private`authenticated <= 0 && SecureShellLink`Private`username =!= "", SecureShellLink`Private`triedUser = SecureShellLink`Private`username; SecureShellLink`Private`authenticated = SecureShellLink`Private`sshKeyPairAuthenticate[SecureShellLink`Private`index, SecureShellLink`Private`username, SecureShellLink`Private`$keyDirectory]; ]; If[SecureShellLink`Private`authenticated <= 0 && (SecureShellLink`Private`username === "" || SecureShellLink`Private`password === ""), SecureShellLink`Private`result = SecureShellLink`Private`loginDialog[SecureShellLink`Private`username, SecureShellLink`Private`hostname]; If[MatchQ[SecureShellLink`Private`result, {_String, _String, _}], {SecureShellLink`Private`username, SecureShellLink`Private`password, SecureShellLink`Private`rememberMe} = SecureShellLink`Private`result, Message[RemoteRun::noAuth]; Return[$Failed]]; SecureShellLink`Private`cacheAuth = SecureShellLink`Private`rememberMe || SecureShellLink`Private`cacheAuth]; If[SecureShellLink`Private`authenticated <= 0 && SecureShellLink`Private`username =!= SecureShellLink`Private`triedUser, SecureShellLink`Private`authenticated = SecureShellLink`Private`sshKeyPairAuthenticate[SecureShellLink`Private`index, SecureShellLink`Private`username, SecureShellLink`Private`$keyDirectory]]; If[SecureShellLink`Private`authenticated <= 0, If[SecureShellLink`Private`cacheAuth, SecureShellLink`Private`authenticated = SecureShellLink`Private`sshPasswordAuthenticateSaveKey[SecureShellLink`Private`index, SecureShellLink`Private`username, SecureShellLink`Private`password, SecureShellLink`Private`$keyDirectory], SecureShellLink`Private`authenticated = SecureShellLink`Private`sshPasswordAuthenticate[SecureShellLink`Private`index, SecureShellLink`Private`username, SecureShellLink`Private`password]]]; If[SecureShellLink`Private`authenticated <= 0, Message[RemoteRun::invAuth]; Return[$Failed]]; SecureShellLink`Private`cacheName[SecureShellLink`Private`hostname, SecureShellLink`Private`username]; If[SecureShellLink`Private`sshShellInit[SecureShellLink`Private`index] <= 0, Message[RemoteRun::cnct]; Return[$Failed]]; SecureShellLink`Private`checkForZeroLenNA[SecureShellLink`Private`sshEvaluate, SecureShellLink`Private`index, SecureShellLink`Private`command]; SecureShellLink`Private`eCode = SecureShellLink`Private`sshReturnCode[SecureShellLink`Private`index]; If[ !IntegerQ[SecureShellLink`Private`eCode] || SecureShellLink`Private`eCode < 0, SecureShellLink`Private`eCode = $Failed]; SecureShellLink`Private`sshClose[SecureShellLink`Private`index]; SecureShellLink`Private`eCode]
 *                   RemoteRun[SecureShellLink`Private`ro:RemoteConnectionObject[SecureShellLink`Private`param_], SecureShellLink`Private`command_String, SecureShellLink`Private`opts:OptionsPattern[]] := Block[{SecureShellLink`Private`result, SecureShellLink`Private`index, SecureShellLink`Private`eCode}, SecureShellLink`Private`index = SecureShellLink`Private`$RemoteUUIDTable[SecureShellLink`Private`param["UUID"]]; If[ !NumberQ[SecureShellLink`Private`index], Message[RemoteRun::invl]; Return[$Failed]]; SecureShellLink`Private`checkForZeroLenNA[SecureShellLink`Private`sshEvaluate, SecureShellLink`Private`index, SecureShellLink`Private`command]; SecureShellLink`Private`eCode = SecureShellLink`Private`sshReturnCode[SecureShellLink`Private`index]; If[ !IntegerQ[SecureShellLink`Private`eCode] || SecureShellLink`Private`eCode < 0, SecureShellLink`Private`eCode = $Failed]; SecureShellLink`Private`eCode]
 * Definitions:      System`Private`LHS$_RemoteRun := RuleCondition[Developer`CheckArgumentCount[System`Private`LHS$, 2, 2]; Fail]
 *
 * Own values:       None
 *
 *                   RemoteRun[SecureShellLink`Private`userhost:_String | _IPAddress | _URL, SecureShellLink`Private`command_String, SecureShellLink`Private`opts:OptionsPattern[]] := Block[{SecureShellLink`Private`hostname, SecureShellLink`Private`username, SecureShellLink`Private`password, SecureShellLink`Private`auths, SecureShellLink`Private`result, SecureShellLink`Private`index, SecureShellLink`Private`authenticated = -1, SecureShellLink`Private`cacheAuth, SecureShellLink`Private`triedUser, SecureShellLink`Private`eCode, SecureShellLink`Private`rememberMe, SecureShellLink`Private`pem, SecureShellLink`Private`pemPassword, SecureShellLink`Private`tryPemWithPass, SecureShellLink`Private`tryPemWithAll}, SecureShellLink`Private`auths = OptionValue[Authentication]; SecureShellLink`Private`cacheAuth = TrueQ[OptionValue[RemoteAuthorizationCaching]]; {SecureShellLink`Private`username, SecureShellLink`Private`password} = SecureShellLink`Private`resolveUserPass[SecureShellLink`Private`userhost, "", "", SecureShellLink`Private`auths]; SecureShellLink`Private`hostname = SecureShellLink`Private`getHost[SecureShellLink`Private`userhost]; {SecureShellLink`Private`username, SecureShellLink`Private`hostname} = SecureShellLink`Private`checkSSHConfig[SecureShellLink`Private`username, SecureShellLink`Private`hostname]; SecureShellLink`Private`index = SecureShellLink`Private`sshInit[SecureShellLink`Private`hostname]; If[SecureShellLink`Private`index < 0, If[SecureShellLink`Private`index === -3, Message[RemoteRun::addr, SecureShellLink`Private`hostname], Message[RemoteRun::init]]; Return[$Failed]]; SecureShellLink`Private`pem = Lookup[SecureShellLink`Private`auths, "SSHKey"]; If[ !MissingQ[SecureShellLink`Private`pem], SecureShellLink`Private`pemPassword = Lookup[SecureShellLink`Private`auths, "SSHKeyPassword", ""]; SecureShellLink`Private`tryPemWithPass[SecureShellLink`Private`singlePem_] := Function[SecureShellLink`Private`singlePass, Block[{SecureShellLink`Private`passData = SecureShellLink`Private`singlePass}, If[SecureShellLink`Private`authenticated > 0, Return[]]; If[SecureShellLink`Private`passData === None, SecureShellLink`Private`passData = ""]; If[MatchQ[SecureShellLink`Private`passData, File[_String, ___]], If[FileExistsQ[First[SecureShellLink`Private`passData]], SecureShellLink`Private`passData = StringTrim[ReadString[SecureShellLink`Private`passData]]; ]; ]; If[StringQ[SecureShellLink`Private`passData], Which[MatchQ[SecureShellLink`Private`singlePem, _File], SecureShellLink`Private`authenticated = SecureShellLink`Private`SSHAuthenticateKeyFile[SecureShellLink`Private`index, SecureShellLink`Private`username, SecureShellLink`Private`singlePem[[1]], SecureShellLink`Private`passData], StringQ[SecureShellLink`Private`singlePem], SecureShellLink`Private`authenticated = SecureShellLink`Private`SSHAuthenticateKeyData[SecureShellLink`Private`index, SecureShellLink`Private`username, SecureShellLink`Private`singlePem, SecureShellLink`Private`passData]]]]]; SecureShellLink`Private`tryPemWithAll = Function[SecureShellLink`Private`singlePem, Which[ListQ[SecureShellLink`Private`pemPassword], SecureShellLink`Private`tryPemWithPass[SecureShellLink`Private`singlePem] /@ SecureShellLink`Private`pemPassword, MatchQ[SecureShellLink`Private`pemPassword, _String | File[_String, ___]], SecureShellLink`Private`tryPemWithPass[SecureShellLink`Private`singlePem][SecureShellLink`Private`pemPassword]]]; Which[ListQ[SecureShellLink`Private`pem], SecureShellLink`Private`tryPemWithAll /@ SecureShellLink`Private`pem, MatchQ[SecureShellLink`Private`pem, _String | _File], SecureShellLink`Private`tryPemWithAll[SecureShellLink`Private`pem]]]; If[SecureShellLink`Private`authenticated <= 0 && SecureShellLink`Private`username =!= "", SecureShellLink`Private`triedUser = SecureShellLink`Private`username; SecureShellLink`Private`authenticated = SecureShellLink`Private`sshKeyPairAuthenticate[SecureShellLink`Private`index, SecureShellLink`Private`username, SecureShellLink`Private`$keyDirectory]; ]; If[SecureShellLink`Private`authenticated <= 0 && (SecureShellLink`Private`username === "" || SecureShellLink`Private`password === ""), SecureShellLink`Private`result = SecureShellLink`Private`loginDialog[SecureShellLink`Private`username, SecureShellLink`Private`hostname]; If[MatchQ[SecureShellLink`Private`result, {_String, _String, _}], {SecureShellLink`Private`username, SecureShellLink`Private`password, SecureShellLink`Private`rememberMe} = SecureShellLink`Private`result, Message[RemoteRun::noAuth]; Return[$Failed]]; SecureShellLink`Private`cacheAuth = SecureShellLink`Private`rememberMe || SecureShellLink`Private`cacheAuth]; If[SecureShellLink`Private`authenticated <= 0 && SecureShellLink`Private`username =!= SecureShellLink`Private`triedUser, SecureShellLink`Private`authenticated = SecureShellLink`Private`sshKeyPairAuthenticate[SecureShellLink`Private`index, SecureShellLink`Private`username, SecureShellLink`Private`$keyDirectory]]; If[SecureShellLink`Private`authenticated <= 0, If[SecureShellLink`Private`cacheAuth, SecureShellLink`Private`authenticated = SecureShellLink`Private`sshPasswordAuthenticateSaveKey[SecureShellLink`Private`index, SecureShellLink`Private`username, SecureShellLink`Private`password, SecureShellLink`Private`$keyDirectory], SecureShellLink`Private`authenticated = SecureShellLink`Private`sshPasswordAuthenticate[SecureShellLink`Private`index, SecureShellLink`Private`username, SecureShellLink`Private`password]]]; If[SecureShellLink`Private`authenticated <= 0, Message[RemoteRun::invAuth]; Return[$Failed]]; SecureShellLink`Private`cacheName[SecureShellLink`Private`hostname, SecureShellLink`Private`username]; If[SecureShellLink`Private`sshShellInit[SecureShellLink`Private`index] <= 0, Message[RemoteRun::cnct]; Return[$Failed]]; SecureShellLink`Private`checkForZeroLenNA[SecureShellLink`Private`sshEvaluate, SecureShellLink`Private`index, SecureShellLink`Private`command]; SecureShellLink`Private`eCode = SecureShellLink`Private`sshReturnCode[SecureShellLink`Private`index]; If[ !IntegerQ[SecureShellLink`Private`eCode] || SecureShellLink`Private`eCode < 0, SecureShellLink`Private`eCode = $Failed]; SecureShellLink`Private`sshClose[SecureShellLink`Private`index]; SecureShellLink`Private`eCode]
 *                   RemoteRun[SecureShellLink`Private`ro:RemoteConnectionObject[SecureShellLink`Private`param_], SecureShellLink`Private`command_String, SecureShellLink`Private`opts:OptionsPattern[]] := Block[{SecureShellLink`Private`result, SecureShellLink`Private`index, SecureShellLink`Private`eCode}, SecureShellLink`Private`index = SecureShellLink`Private`$RemoteUUIDTable[SecureShellLink`Private`param["UUID"]]; If[ !NumberQ[SecureShellLink`Private`index], Message[RemoteRun::invl]; Return[$Failed]]; SecureShellLink`Private`checkForZeroLenNA[SecureShellLink`Private`sshEvaluate, SecureShellLink`Private`index, SecureShellLink`Private`command]; SecureShellLink`Private`eCode = SecureShellLink`Private`sshReturnCode[SecureShellLink`Private`index]; If[ !IntegerQ[SecureShellLink`Private`eCode] || SecureShellLink`Private`eCode < 0, SecureShellLink`Private`eCode = $Failed]; SecureShellLink`Private`eCode]
 * Down values:      System`Private`LHS$_RemoteRun := RuleCondition[Developer`CheckArgumentCount[System`Private`LHS$, 2, 2]; Fail]
 *
 * Up values:        Internal`ArgumentCountRegistry[RemoteRun] ^= {2, 2}
 *
 * Sub values:       None
 *
 * Default value:    None
 *
 * Numeric values:   None
 */
fun remoteRun(vararg arguments: Any?, options: MutableMap<String, Any?> = mutableMapOf()): MathematicaFunction {
	return MathematicaFunction("RemoteRun", arguments.toMutableList(), options)
}
